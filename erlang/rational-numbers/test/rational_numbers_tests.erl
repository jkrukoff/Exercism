%% Based on canonical data version 1.0.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/rational-numbers/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(rational_numbers_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").


equal_float(A, B) ->
    round(A*100) / 100==round(B*100) / 100.


'1_add_two_positive_rational_numbers_test'() ->
    ?assertEqual({7, 6},
		 rational_numbers:add({1, 2}, {2, 3})).

'2_add_a_positive_rational_number_and_a_negative_rational_number_test'() ->
    ?assertEqual({-1, 6},
		 rational_numbers:add({1, 2}, {-2, 3})).

'3_add_two_negative_rational_numbers_test'() ->
    ?assertEqual({-7, 6},
		 rational_numbers:add({-1, 2}, {-2, 3})).

'4_add_a_rational_number_to_its_additive_inverse_test'() ->
    ?assertEqual({0, 1},
		 rational_numbers:add({1, 2}, {-1, 2})).

'5_subtract_two_positive_rational_numbers_test'() ->
    ?assertEqual({-1, 6},
		 rational_numbers:sub({1, 2}, {2, 3})).

'6_subtract_a_positive_rational_number_and_a_negative_rational_number_test'() ->
    ?assertEqual({7, 6},
		 rational_numbers:sub({1, 2}, {-2, 3})).

'7_subtract_two_negative_rational_numbers_test'() ->
    ?assertEqual({1, 6},
		 rational_numbers:sub({-1, 2}, {-2, 3})).

'8_subtract_a_rational_number_from_itself_test'() ->
    ?assertEqual({0, 1},
		 rational_numbers:sub({1, 2}, {1, 2})).

'9_multiply_two_positive_rational_numbers_test'() ->
    ?assertEqual({1, 3},
		 rational_numbers:mul({1, 2}, {2, 3})).

'10_multiply_a_negative_rational_number_by_a_positive_rational_number_test'() ->
    ?assertEqual({-1, 3},
		 rational_numbers:mul({-1, 2}, {2, 3})).

'11_multiply_two_negative_rational_numbers_test'() ->
    ?assertEqual({1, 3},
		 rational_numbers:mul({-1, 2}, {-2, 3})).

'12_multiply_a_rational_number_by_its_reciprocal_test'() ->
    ?assertEqual({1, 1},
		 rational_numbers:mul({1, 2}, {2, 1})).

'13_multiply_a_rational_number_by_1_test'() ->
    ?assertEqual({1, 2},
		 rational_numbers:mul({1, 2}, {1, 1})).

'14_multiply_a_rational_number_by_0_test'() ->
    ?assertEqual({0, 1},
		 rational_numbers:mul({1, 2}, {0, 1})).

'15_divide_two_positive_rational_numbers_test'() ->
    ?assertEqual({3, 4},
		 rational_numbers:divide({1, 2}, {2, 3})).

'16_divide_a_positive_rational_number_by_a_negative_rational_number_test'() ->
    ?assertEqual({-3, 4},
		 rational_numbers:divide({1, 2}, {-2, 3})).

'17_divide_two_negative_rational_numbers_test'() ->
    ?assertEqual({3, 4},
		 rational_numbers:divide({-1, 2}, {-2, 3})).

'18_divide_a_rational_number_by_1_test'() ->
    ?assertEqual({1, 2},
		 rational_numbers:divide({1, 2}, {1, 1})).

'19_absolute_value_of_a_positive_rational_number_test'() ->
    ?assertEqual({1, 2}, rational_numbers:absolute({1, 2})).

'20_absolute_value_of_a_negative_rational_number_test'() ->
    ?assertEqual({1, 2},
		 rational_numbers:absolute({-1, 2})).

'21_absolute_value_of_zero_test'() ->
    ?assertEqual({0, 1}, rational_numbers:absolute({0, 1})).

'22_raise_a_positive_rational_number_to_a_positive_integer_power_test'() ->
    ?assertEqual({1, 8}, rational_numbers:exp({1, 2}, 3)).

'23_raise_a_negative_rational_number_to_a_positive_integer_power_test'() ->
    ?assertEqual({-1, 8}, rational_numbers:exp({-1, 2}, 3)).

'24_raise_zero_to_an_integer_power_test'() ->
    ?assertEqual({0, 1}, rational_numbers:exp({0, 1}, 5)).

'25_raise_one_to_an_integer_power_test'() ->
    ?assertEqual({1, 1}, rational_numbers:exp({1, 1}, 4)).

'26_raise_a_positive_rational_number_to_the_power_of_zero_test'() ->
    ?assertEqual({1, 1}, rational_numbers:exp({1, 2}, 0)).

'27_raise_a_negative_rational_number_to_the_power_of_zero_test'() ->
    ?assertEqual({1, 1}, rational_numbers:exp({-1, 2}, 0)).

'28_raise_a_real_number_to_a_positive_rational_number_test'() ->
    ?assert(equal_float(1.6e+1,
			rational_numbers:exp(8, {4, 3}))).

'29_raise_a_real_number_to_a_negative_rational_number_test'() ->
    ?assert(equal_float(3.33333333333333314830e-1,
			rational_numbers:exp(9, {-1, 2}))).

'30_raise_a_real_number_to_a_zero_rational_number_test'() ->
    ?assert(equal_float(1.0,
			rational_numbers:exp(2, {0, 1}))).

'31_reduce_a_positive_rational_number_to_lowest_terms_test'() ->
    ?assertEqual({1, 2}, rational_numbers:reduce({2, 4})).

'32_reduce_a_negative_rational_number_to_lowest_terms_test'() ->
    ?assertEqual({-2, 3}, rational_numbers:reduce({-4, 6})).

'33_reduce_a_rational_number_with_a_negative_denominator_to_lowest_terms_test'() ->
    ?assertEqual({-1, 3}, rational_numbers:reduce({3, -9})).

'34_reduce_zero_to_lowest_terms_test'() ->
    ?assertEqual({0, 1}, rational_numbers:reduce({0, 6})).

'35_reduce_an_integer_to_lowest_terms_test'() ->
    ?assertEqual({-2, 1},
		 rational_numbers:reduce({-14, 7})).

'36_reduce_one_to_lowest_terms_test'() ->
    ?assertEqual({1, 1}, rational_numbers:reduce({13, 13})).
